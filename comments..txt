lines 12-35 on sever/models/index.js
// "use strict";
// const fs = require("fs");
// const path = require("path");
// const Sequelize = require("sequelize");
// const env = process.env.NODE_ENV || "development";
// const config = require(path.join(__dirname, '..', 'app', 'config', 'config.json'))[env];
// const sequelize = new Sequelize(config.database, config.username, config.password, config);
// const db = {};
// fs
//     .readdirSync(__dirname)
//     .filter(function (file) {
//         return (file.indexOf(".") !== 0) && (file !== "index.js");
//     })
//     .forEach(function (file) {
//         const model = sequelize.define(path.join(__dirname, file));
//         db[model.name] = model;
//     });
// Object.keys(db).forEach(function (modelName) {
//     if ("associate" in db[modelName]) {
//         db[modelName].associate(db);
//     }
// });
// db.sequelize = sequelize;
// db.Sequelize = Sequelize;
// module.exports = db

line 27 in server/views/home.html
/*background: url("https://doc-08-2c-docs.googleusercontent.com/docs/securesc/68c90smiglihng9534mvqmq1946dmis5/fo0picsp1nhiucmc0l25s29respgpr4j/1631524275000/03522360960922298374/03522360960922298374/1Sx0jhdpEpnNIydS4rnN4kHSJtU1EyWka?e=view&authuser=0&nonce=gcrocepgbb17m&user=03522360960922298374&hash=tfhgbs86ka6divo3llbvp93mg4csvb38") no-repeat center/ cover;*/

line 132-198 in server/views/home.html
<!-- <div class="main">  	
		<input type="checkbox" id="chk" aria-hidden="true"> -->
        <!-- <h1>Sign up</h1>
<form action="/signup" method="post">
    <section>
        <label for="username">Username</label>
        <input id="username" name="username" type="text" autocomplete="username" required>
    </section>
    <section>
        <label for="new-password">Password</label>
        <input id="new-password" name="password" type="password" autocomplete="new-password" required>
    </section>
    <button type="submit">Sign up</button>
</form>
			-->
			<!-- <p class="help">Already have an account? <a href="/login">Sign in</a></p>
		</section> --> 

			<!-- <div class="signup">
                    <form action="/signup" method="post">
					<label for="chk" aria-hidden="true">Sign up</label>
                        <section> -->
                            <!-- <label for="username">Username</label> -->
                            <!-- <input for="username" id="username" name="username" type="text" autocomplete="username" placeholder="Username" required>
                        </section>
                        <section> -->
                            <!-- <label for="new-password">Password</label> -->
                            <!-- <input for="new-password" id="new-password" name="password" type="password" autocomplete="new-password" placeholder="Password" required>
                        </section> -->
                        <!-- <button type="submit">Sign up</button> -->
                        
                        <!-- 
                            <input type="text" name="txt" placeholder="User name" required="" onChange="handleChange()">
                            <input type="email" name="email" placeholder="Email" required="">
                            <input type="password" name="pswd" placeholder="Password" required=""> -->
                            <!-- <button>Sign up</button>
                            <p class="help">Already have an account? <a href="/login">Sign in</a></p>
                        </section>
                    </form>
			</div>

			<div class="login"> -->
				<!-- <form>
					<label for="chk" aria-hidden="true">Login</label>
					<input type="email" name="email" placeholder="Email" required="">
					<input type="password" name="pswd" placeholder="Password" required="">
					<button>Login</button>
				</form> -->
                <!-- <section class="prompt"> -->
                    <!-- added -->
                    <!-- <h1>Sign in</h1> -->
                    <!-- <form action="/login/password" method="post">
                    <label for="chk" aria-hidden="true">Login</label>
                        <section> -->
                            <!-- <label for="username">Username</label> -->
                            <!-- <input for="username" id="username" name="username" name="email type="text" autocomplete="username" placeholder="Username" required autofocus>
                        </section>
                        <section> -->
                            <!-- <label for="current-password">Password</label> -->
                            <!-- <input for="current-password" id="current-password" name="pswd" name="password" type="password" autocomplete="current-password" placeholder="Password" required>
                        </section>
                        <button type="submit">Login</button>
                        <p class="help">Don't have an account? <a href="/signup">Sign up</a></p>
                    </form>
                </section> -->
			<!-- </div> -->
	<!-- </div> -->

lines 4 in server/routes/index.js
// const userRouter = require("./user");

lines 23-24 in server/routes/index.js
// app.use("/api",initWebRoutes)
// router.use("/users", userRouter);

lines 56-57 in server/routes/index.js
// app.set('routes', path.join(__dirname, 'routes'));
// app.set('view engine', 'ejs');

lines 62-77 in server/routes/index.js
//takes req.body of {username, password} and creates a new user with the hashed password
// router.post("/register", async (req, res, next) => {
//   try {
//     const { username, password } = req.body;
//     const hashedPassword = await bcrypt.hash(password, SALT_COUNT);
//     const { id, user } = await User.create({
//       username,
//       password: hashedPassword,
//     });
//     const token = jwt.sign({ id, user }, process.env.JWT_SECRET);
//     res.status(200).send({ message: "success", token });
//   } catch (error) {
//     console.log(error);
//     next(error);
//   }
// });

lines 118-134
//takes req.body of {username, password}, finds user by username, and compares the password with the hashed version from the DB
// router.post("/login", async (req, res, next) => {
//   try {
//     const { username, password } = req.body;
//     const user = await User.findOne({ where: { username } });
//     const isAMatch = await bcrypt.compare(password, user.password);
//     if (isAMatch) {
//       const token = jwt.sign({ user }, process.env.JWT_SECRET);
//       res.status(200).send({ message: "success", token });
//     } else {
//       res.status(401).send("Unauthorized");
//     }
//   } catch (error) {
//     console.log(error);
//     next(error);
//   }
// });

lines 22-32 in server/routes/messages
/*router.get("/:conversationId", async (req, res) => {
    try {
      const messages = await Message.find({
        conversationId: req.params.conversationId,
      });
      res.status(200).json(messages);
    } catch (err) {
      res.status(500).json(err);
    }
  });
  */

  lines 23-24 in server/app.js
  // 
// const authRouter = require('./routes/auth');

 lines 23-24 in server/app.js

  lines 29-38 in server/app.js
  // 
// app.use(session({secret : config.secretKey}));

// app.use(passport.initialize());

// app.use(passport.session());
// 
// parsing middleware for form input data & json
// app.use(express.urlencoded({ extended: false }));
// app.use(express.json());